<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sparklyr on Random R Ramblings</title>
    <link>/tags/sparklyr/</link>
    <description>Recent content in sparklyr on Random R Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 05 Sep 2019 21:13:14 -0500</lastBuildDate>
    
        <atom:link href="/tags/sparklyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Including Optional Functionality from Other Packages in Your Code</title>
      <link>/2019/09/05/including-optional-functionality-from-other-packages-in-your-code/</link>
      <pubDate>Thu, 05 Sep 2019 21:13:14 -0500</pubDate>
      
      <guid>/2019/09/05/including-optional-functionality-from-other-packages-in-your-code/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Let’s say you want to write a function with optional functionality which is dependent on the installation of a package that your colleague may not have installed. For example, let’s say you want to have an option to return a &lt;code&gt;data.table&lt;/code&gt; (or a &lt;code&gt;tibble&lt;/code&gt;) instead of a &lt;code&gt;data.frame&lt;/code&gt;, but in this case you don’t want to force your function’s user to have to install &lt;code&gt;data.table&lt;/code&gt; (or &lt;code&gt;tibble&lt;/code&gt; - and its dependencies) just to use your function. Maybe they can’t install it because they are restricted to do so by their IT department or maybe they are working offline. Is it possible to do this?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-toy-example&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A Toy Example&lt;/h1&gt;
&lt;p&gt;Let’s say we have a simple function which takes a &lt;code&gt;data.frame&lt;/code&gt; and adds a new column which is a multiplication of an existing column, before returning the whole &lt;code&gt;data.frame&lt;/code&gt; with that new column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;toy_function &amp;lt;- function(data, column, multiple = 2L, as_data_table = FALSE) {
  stopifnot(is.integer(multiple) || is.numeric(multiple))
  new_column_name &amp;lt;- paste(column, multiple, sep = &amp;quot;_&amp;quot;)
  data[, new_column_name] &amp;lt;- data[, column] * multiple
  if (as_data_table) data &amp;lt;- data.table::setDT(data)
  return(data)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running this function with &lt;code&gt;as_data_table = TRUE&lt;/code&gt; without &lt;code&gt;data.table&lt;/code&gt; installed will give the following error:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;toy_function(mtcars, &amp;quot;mpg&amp;quot;, as_data_table = TRUE)
# Error in loadNamespace(name) : there is no package called ‘data.table’&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a frustration for the user. This also means that the whole function no longer works and doesn’t return anything. So what can we do? Well, this is where the function &lt;code&gt;requireNamespace()&lt;/code&gt; comes in handy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;requireNamespace&lt;/code&gt; is a wrapper for &lt;code&gt;loadNamespace&lt;/code&gt; analogous to require that returns a &lt;code&gt;logical&lt;/code&gt; value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using &lt;code&gt;requireNamespace()&lt;/code&gt;, we can test whether or not the &lt;code&gt;data.table&lt;/code&gt; package can be loaded from the user’s library before running certain functionality. Let’s take a look at how this changes our function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;toy_function &amp;lt;- function(data, column, multiple = 2L, as_data_table = FALSE) {
  stopifnot(is.integer(multiple) || is.numeric(multiple))
  new_column_name &amp;lt;- paste(column, multiple, sep = &amp;quot;_&amp;quot;)
  data[, new_column_name] &amp;lt;- data[, column] * multiple
  if (as_data_table) {
    if (!requireNamespace(&amp;quot;data.table&amp;quot;, quietly = TRUE)) {
      warning(&amp;quot;Please install package &amp;#39;data.table&amp;#39; when using &amp;#39;as_data_table = TRUE&amp;#39;&amp;quot;)
      return(data)
    }
    data &amp;lt;- data.table::setDT(data)
  }
  return(data)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we run our function, the function will check for a &lt;code&gt;data.table&lt;/code&gt; installation and if it is not available, it will warn us that we need to install &lt;code&gt;data.table&lt;/code&gt; in order to use this functionality; yet it will still return the manipulated data, just as a &lt;code&gt;data.frame&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;toy_function(mtcars, &amp;quot;mpg&amp;quot;, as_data_table = TRUE)
#                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb mpg_2
# Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4  42.0
# Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4  42.0
# Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1  45.6
# ...
# Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6  39.4
# Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8  30.0
# Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  42.8
# Warning message:
# In toy_function(mtcars, &amp;quot;mpg&amp;quot;, as_data_table = TRUE) :
#   Please install package &amp;#39;data.table&amp;#39; when using &amp;#39;as_data_table = TRUE&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A real example of this can be seen in the &lt;a href=&#34;https://github.com/fstpackage/fst&#34;&gt;&lt;code&gt;fst&lt;/code&gt;&lt;/a&gt; package. When using the &lt;code&gt;fst::read_fst()&lt;/code&gt; function, the user has the option to return their loaded data &lt;a href=&#34;https://github.com/fstpackage/fst/blob/develop/R/fst.R#L172&#34;&gt;as a &lt;code&gt;data.table&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I really like how this way of using optional functionality does not force additional package downloads on people and also means that your code remains usable on restricted servers or offline. It’s also a great way to not clog up people’s libraries (I’m looking at you &lt;code&gt;tidyverse&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;package-development&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Package Development&lt;/h1&gt;
&lt;p&gt;This solution extends further when developing an R package. My current team is due to start utilising Spark, though our Spark cluster is not yet configured. I have therefore been testing new functionality using a local Spark cluster on our dev environment. Our production environment does not have the &lt;code&gt;sparklyr&lt;/code&gt; package installed yet and so I cannot include any &lt;code&gt;sparklyr&lt;/code&gt; code within my codebase…or can I?&lt;/p&gt;
&lt;p&gt;Typically when your package relies on another package for functionality, you list that package as an &lt;code&gt;Import&lt;/code&gt; within your package’s &lt;code&gt;DESCRIPTION&lt;/code&gt; file. But what this typically means is that when someone installs your package, they will also need to install the &lt;code&gt;Import&lt;/code&gt;s. However if the dependency is not available to install, you will receive the following error upon installation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;==&amp;gt; R CMD INSTALL --no-multiarch --with-keep.source mypackage

* installing to library ‘/Library/Frameworks/R.framework/Versions/3.5/Resources/library’
ERROR: dependency ‘sparklyr’ is not available for package ‘mypackage’
* removing ‘/Library/Frameworks/R.framework/Versions/3.5/Resources/library/mypackage’

Exited with status 1.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I am forgoing the idea that it probably isn’t best practice to include non-production code which will not work in your package, this blog post is for the purposes of demonstration only; the following is what you &lt;em&gt;could&lt;/em&gt; do.&lt;/p&gt;
&lt;p&gt;Removing &lt;code&gt;sparklyr&lt;/code&gt; from the &lt;code&gt;Import&lt;/code&gt; list would allow us to install the package but we would then face two new issues. Firstly, end users could potentially run the function (even if it isn’t exported) and be faced with that same unhelpful error message we saw earlier.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_function()
# Error in loadNamespace(name) : there is no package called ‘sparklyr’&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Secondly, from a developer’s point of view, the &lt;code&gt;R CMD check&lt;/code&gt; would fail - which would in turn fail any CI/CD pipelines.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::check()
# ...
# ❯ checking dependencies in R code ... WARNING
#   &amp;#39;::&amp;#39; or &amp;#39;:::&amp;#39; import not declared from: ‘sparklyr’&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So within my function, I simply place the below code (or similar) and if the user tries to run the function, it will simply stop and tell them they need to install the &lt;code&gt;sparklyr&lt;/code&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!requireNamespace(&amp;quot;sparklyr&amp;quot;, quietly = TRUE)) {
  stop(&amp;quot;Package sparklyr needed.&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will subsequently pass the &lt;code&gt;R CMD check&lt;/code&gt;. Were this an open source package, I could add &lt;code&gt;sparklyr&lt;/code&gt; to the &lt;code&gt;Suggests&lt;/code&gt; field of the &lt;code&gt;DESCRIPTION&lt;/code&gt; file such that users could install the &lt;code&gt;sparklyr&lt;/code&gt; package to get the additional functionality if they wanted it (this is exactly what the &lt;code&gt;fst&lt;/code&gt; package does).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;So to conclude if you want to include functionality in your code which relies on other packages but are worried about people not having access to those packages, or simply don’t want to force your users to have to install the additional packages, then consider &lt;code&gt;requireNamespace()&lt;/code&gt;. This is a great way of offering additional functionality without the need to clog up user’s libraries.&lt;/p&gt;
&lt;p&gt;Credit goes to my colleague &lt;a href=&#34;https://twitter.com/jozefhajnala&#34;&gt;Jozef Hajnala&lt;/a&gt; who pointed out this really neat trick!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Extending sparklyr: Data Types</title>
      <link>/2018/03/08/extending-sparklyr-data-types/</link>
      <pubDate>Thu, 08 Mar 2018 21:13:14 -0500</pubDate>
      
      <guid>/2018/03/08/extending-sparklyr-data-types/</guid>
      <description>


&lt;div id=&#34;tldr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;sparklyr&lt;/code&gt; maps R data types and data storage types to Scala, but it doesn’t handle all data storage types. This blog post discusses how to generate Scala data storage types from the R side, that are not generated by &lt;code&gt;sparklyr&lt;/code&gt;. You can do this by using the &lt;code&gt;sparklyr::invoke_new&lt;/code&gt; function to generate the objects you want in Java or Scala, for example a &lt;code&gt;java.util.ArrayList&lt;/code&gt;, and then &lt;code&gt;sparklyr::invoke&lt;/code&gt; methods of the class to add data to it, or convert it to the type you need. Read on to see how to deal with different data storage types from the Scala side or skip ahead to see how to &lt;a href=&#34;#generating-scala-data-types-from-r&#34;&gt;generate Scala data storage types from R&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;When working to &lt;a href=&#34;http://spark.rstudio.com/extensions/&#34;&gt;extend&lt;/a&gt; the &lt;code&gt;sparklyr&lt;/code&gt; package, for example to call custom Scala libraries, oftentimes you will come across Scala methods which require you to use different data storage types to those automatically handled by &lt;code&gt;sparklyr&lt;/code&gt;. When using the &lt;code&gt;invoke&lt;/code&gt; family of functions, R data types map to Scala data types, but &lt;code&gt;sparklyr&lt;/code&gt; &lt;a href=&#34;https://github.com/rstudio/sparklyr/issues/1324&#34;&gt;currently&lt;/a&gt; only handles certain R data storage type mappings. The below table shows the data mappings currently handled by &lt;code&gt;sparklyr&lt;/code&gt;:&lt;/p&gt;
&lt;table style=&#34;width:100%&#34;&gt;
&lt;tr&gt;
&lt;th&gt;
R Type
&lt;/th&gt;
&lt;th&gt;
Scala Type
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
logical
&lt;/td&gt;
&lt;td&gt;
Boolean
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
numeric
&lt;/td&gt;
&lt;td&gt;
Double
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
integer
&lt;/td&gt;
&lt;td&gt;
Integer
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
character
&lt;/td&gt;
&lt;td&gt;
String
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
list
&lt;/td&gt;
&lt;td&gt;
Array
&lt;/td&gt;
&lt;/tr&gt;
&lt;caption&gt;
Table 1: R to Scala type mappings available in &lt;code&gt;sparklyr&lt;/code&gt;
&lt;/caption&gt;
&lt;/table&gt;
&lt;p&gt;So Scala functions with parameters that require a &lt;code&gt;List&lt;/code&gt; or a &lt;code&gt;Seq&lt;/code&gt;, for example, need to be handled in a different way. There are two ways we can approach this problem; from the Scala side and from the R side. We will explore both approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other-scala-data-types&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other Scala Data Types&lt;/h1&gt;
&lt;div id=&#34;solutions-from-the-scala-side&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solutions from the Scala Side&lt;/h2&gt;
&lt;p&gt;There are several ways that this issue can be overcome from the Scala side, here we highlight three: &lt;a href=&#34;#using-different-data-types-in-scala&#34;&gt;changing the data type&lt;/a&gt; used within Scala; using &lt;a href=&#34;#using-overloading&#34;&gt;overloading&lt;/a&gt;; and defining a &lt;a href=&#34;#defining-a-new-scala-class&#34;&gt;specific R class&lt;/a&gt; to be called from R. These are discussed in detail below.&lt;/p&gt;
&lt;div id=&#34;using-different-data-types-in-scala&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using Different Data Types in Scala&lt;/h3&gt;
&lt;p&gt;One obvous way we could fix this problem is to rewrite the Scala code to use a different parameter type in the Scala method. For example, we could use an &lt;code&gt;Array&lt;/code&gt; which would require us passing a &lt;code&gt;list()&lt;/code&gt; on the R side. However, this is not ideal if your project is large, has lots of legacy code and uses other APIs such as &lt;code&gt;PySpark&lt;/code&gt;; you may end up changing a lot of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-overloading&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Using Overloading&lt;/h3&gt;
&lt;p&gt;We can instead use &lt;a href=&#34;https://www.javatpoint.com/scala-method-overloading&#34;&gt;overloading&lt;/a&gt;, which allows us to define methods of same name, in the same class, but having either different parameters or data types, though this &lt;a href=&#34;https://stackoverflow.com/questions/2510108/why-avoid-method-overloading&#34;&gt;has many issues&lt;/a&gt;. We would also need to write additional tests for the additional methods. You can think of this as working like R’s S3 methods - for S3 methods the method behaviour will change based on the object’s class.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;defining-a-new-scala-class&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Defining A New Scala Class&lt;/h3&gt;
&lt;p&gt;To avoid the possible issues of overloading, we can define two separate classes, &lt;code&gt;myClass&lt;/code&gt; and &lt;code&gt;myClassR&lt;/code&gt;. These will both call upon the same underlying &lt;a href=&#34;https://docs.scala-lang.org/overviews/core/implicit-classes.html&#34;&gt;implicit&lt;/a&gt; class which does the bulk of the work for the method. The difference is the data types that are passed into &lt;code&gt;myClass&lt;/code&gt; and &lt;code&gt;myClassR&lt;/code&gt;. &lt;code&gt;myClass&lt;/code&gt; will take the data type you want to use, whereas &lt;code&gt;myClassR&lt;/code&gt; will take the data type passed to it by &lt;code&gt;sparklyr&lt;/code&gt; and then convert it before calling the implicit. Of course using this approach effectively doubles our code and is therefore very wasteful; we would also again, need to write additional tests for this new class.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;solutions-from-the-r-side&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solutions from the R Side&lt;/h2&gt;
&lt;div id=&#34;generating-scala-data-storage-types-from-r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Generating Scala Data Storage Types from R&lt;/h3&gt;
&lt;p&gt;We can actually forgo any changes on the Scala side of our code by generating what we need on the R side. Imagine we wanted to generate a Scala &lt;code&gt;Seq&lt;/code&gt; as an example, first we create a Java &lt;code&gt;ArrayList&lt;/code&gt; in the Spark environment and incrementally &lt;code&gt;add&lt;/code&gt; data to it using the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sparklyr)
sc &amp;lt;- spark_connect(master = &amp;quot;local&amp;quot;)
# map some R vector `x` to a java ArrayList
x &amp;lt;- c(1, 2, 3)
al &amp;lt;- invoke_new(sc, &amp;quot;java.util.ArrayList&amp;quot;)
lapply(x, FUN = function(y){invoke(al, &amp;quot;add&amp;quot;, y)})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note we don’t need to reassign the results of the &lt;code&gt;lapply&lt;/code&gt; because it is adding values to the Scala &lt;code&gt;List&lt;/code&gt; in the JVM. Then using the &lt;a href=&#34;https://www.scala-lang.org/api/2.12.3/scala/collection/JavaConversions$.html&#34;&gt;&lt;code&gt;JavaConversions&lt;/code&gt; Scala package&lt;/a&gt;, we convert the &lt;code&gt;Array&lt;/code&gt; to a &lt;code&gt;Seq&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;invoke_static(sc, &amp;quot;scala.collection.JavaConversions&amp;quot;, &amp;quot;asScalaBuffer&amp;quot;, al) %&amp;gt;%
  invoke(&amp;quot;toSeq&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Putting this all together in a function gives&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scala_seq &amp;lt;- function(sc, x) {
  al &amp;lt;- invoke_new(sc, &amp;quot;java.util.ArrayList&amp;quot;)
  lapply(
    x,
    FUN = function(y) {
      invoke(al, &amp;quot;add&amp;quot;, y)
    }
  )
  invoke_static(sc, &amp;quot;scala.collection.JavaConversions&amp;quot;, &amp;quot;asScalaBuffer&amp;quot;, al) %&amp;gt;%
    invoke(&amp;quot;toSeq&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Calling this function returns a reference to the Scala object (&lt;code&gt;spark_jobj&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# connect to spark
sc &amp;lt;- sparklyr::spark_connect(master = &amp;quot;local&amp;quot;)

# create a scala seq object
scala_seq(sc, c(1, 2, 3))
# &amp;lt;jobj[16]&amp;gt;
#   scala.collection.convert.Wrappers$JListWrapper
#   Buffer(1.0, 2.0, 3.0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will note that the output we have received tells us we have created a &lt;code&gt;Buffer&lt;/code&gt; but &lt;code&gt;Buffer&lt;/code&gt; (and &lt;code&gt;List&lt;/code&gt;) both &lt;a href=&#34;https://stackoverflow.com/questions/11126577/why-are-buffer-and-list-objects-equal-even-they-are-from-different-classes&#34;&gt;belong to the same category (sequence)&lt;/a&gt;. If what we needed was actually a &lt;code&gt;List&lt;/code&gt; object, then we simply have to &lt;code&gt;invoke&lt;/code&gt; the &lt;code&gt;toList&lt;/code&gt; method on a &lt;code&gt;Seq&lt;/code&gt; (or &lt;code&gt;Buffer&lt;/code&gt;) object. The below function shows this in action, again this returns a reference to the Scala object (&lt;code&gt;spark_jobj&lt;/code&gt;) to the R console.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scala_list &amp;lt;- function(sc, x) {
  scala_seq(sc, x) %&amp;gt;%
    invoke(&amp;quot;toList&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a scala list
scala_list(sc, c(1, 2, 3))
# &amp;lt;jobj[21]&amp;gt;
#   scala.collection.immutable.$colon$colon
#   List(1.0, 2.0, 3.0)

# disconnect the spark connection
spark_disconnect(sc = sc)
# NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar results can be achieved for other data types. These new data storage types can now be used in Scala function calls when extending &lt;code&gt;sparklyr&lt;/code&gt;, we simply generate the data in the JVM and pass the reference to the function we &lt;code&gt;invoke&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>